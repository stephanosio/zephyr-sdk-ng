From 62f28beb597e8299a79add217281143fc6cb5ac2 Mon Sep 17 00:00:00 2001
From: Stephanos Ioannidis <root@stephanos.io>
Date: Thu, 28 Nov 2019 23:32:10 +0900
Subject: [PATCH 1/5] Add newlib nano variant configurations

This commit adds the new configuration option 'LIBC_NANO_NEWLIB' for
specifying the additional 'nano' variant of newlib to be built.

In addition, the existing newlib 'LIBC_NEWLIB_...' configs are mirrored
as 'LIBC_NANO_NEWLIB_...' in order to accommodate specifying different
build configurations for the nano variant.

For more details, refer to the issue zephyrproject-rtos/sdk-ng#152.

Signed-off-by: Stephanos Ioannidis <root@stephanos.io>
---
 config/libc/newlib.in | 208 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 207 insertions(+), 1 deletion(-)

diff --git a/config/libc/newlib.in b/config/libc/newlib.in
index 268f9564..bd193cd8 100644
--- a/config/libc/newlib.in
+++ b/config/libc/newlib.in
@@ -172,7 +172,6 @@ config LIBC_NEWLIB_WIDE_ORIENT
 config LIBC_NEWLIB_ENABLE_TARGET_OPTSPACE
     bool
     prompt "Optimize newlib for size"
-    default y
     help
       Pass --enable-target-optspace to newlib configure.
 
@@ -215,3 +214,210 @@ config LIBC_NEWLIB_EXTRA_CONFIG_ARRAY
     default ""
     help
       Extra flags to pass onto ./configure when configuring the newlib.
+
+# newlib nano variant options
+comment "Options for newlib nano"
+
+config LIBC_NANO_NEWLIB
+    bool
+    prompt "Enable newlib nano variant"
+    help
+      Enables the additional `nano' variant of newlib to be built.  The build
+      options for this variant can be configured separately to produce the
+      smallest library size.  The nano variant can be used by specifying
+      `--specs=nano.specs' during linking.
+
+if LIBC_NANO_NEWLIB
+
+config LIBC_NANO_NEWLIB_TARGET_CFLAGS
+    string
+    prompt "Target CFLAGS for newlib nano"
+    default ""
+    help
+      Used to add specific options when compiling the target libraries
+      (eg. -ffunction-sections -fdata-sections), which can't be defined
+      in global TARGET_CFLAGS, because they shall be not used for the
+      gcc target libraries.
+      Note:  Both TARGET_CFLAGS and LIBC_NANO_NEWLIB_TARGET_CFLAGS are used
+             to compile the libraries.
+
+      Leave blank if you don't know better.
+
+config LIBC_NANO_NEWLIB_IO_C99FMT
+    bool
+    prompt "Enable IOs on C99 formats"
+    help
+      Enable support for IOs on C99 formats.
+
+config LIBC_NANO_NEWLIB_IO_LL
+    bool
+    prompt "Enable IOs on long long"
+    help
+      Enable support for IOs on long long integers.
+
+config LIBC_NANO_NEWLIB_IO_FLOAT
+    bool
+    prompt "Enable IOs on floats and doubles"
+    help
+      Enable support for IOs on floating point
+      values (float and double).
+
+config LIBC_NANO_NEWLIB_IO_LDBL
+    bool
+    prompt "Enable IOs on long doubles"
+    depends on LIBC_NANO_NEWLIB_IO_FLOAT
+    help
+      Enable support for IOs on long doubles.
+
+config LIBC_NANO_NEWLIB_IO_POS_ARGS
+    bool
+    prompt "Enable printf-family positional arg support"
+    help
+        Enable printf-family positional arg support.
+
+config LIBC_NANO_NEWLIB_FVWRITE_IN_STREAMIO
+    bool
+    prompt "Vector buffer mechanism to support stream IO buffering"
+    default y
+    help
+        NEWLIB implements the vector buffer mechanism to support stream IO
+        buffering required by C standard.  This feature is possibly
+        unnecessary for embedded systems which won't change file buffering
+        with functions like `setbuf' or `setvbuf'.  The buffering mechanism
+        still acts as default for STDIN/STDOUT/STDERR even if this option
+        is specified.
+
+config LIBC_NANO_NEWLIB_UNBUF_STREAM_OPT
+    bool
+    prompt "Optimize fprintf to unbuffered unix file"
+    help
+        NEWLIB does optimization when `fprintf to write only unbuffered unix
+        file'.  It creates a temorary buffer to do the optimization that
+        increases stack consumption by about `BUFSIZ' bytes. Disabling this option
+        disables the optimization and saves size of text and stack.
+
+config LIBC_NANO_NEWLIB_FSEEK_OPTIMIZATION
+    bool
+    prompt "Fseek optimisation"
+    help
+        Disabling fseek optimisation can decrease code size.
+
+config LIBC_NANO_NEWLIB_DISABLE_SUPPLIED_SYSCALLS
+    bool
+    prompt "Disable the syscalls supplied with newlib"
+    help
+      Disable the syscalls that come with newlib. You
+      will have to implement your own _sbrk, _read,
+      _write... If you plan to port newlib to a new
+      platform/board, say Yes.
+
+config LIBC_NANO_NEWLIB_REGISTER_FINI
+    bool
+    prompt "Enable finalization function registration using atexit"
+    help
+        Enable finalization function registration using atexit.
+
+config LIBC_NANO_NEWLIB_ATEXIT_DYNAMIC_ALLOC
+    bool
+    prompt "Enable dynamic allocation of atexit entries"
+    default y
+    help
+        Enable dynamic allocation of atexit entries.
+
+config LIBC_NANO_NEWLIB_GLOBAL_ATEXIT
+    bool
+    prompt "Enable atexit data structure as global variable"
+    default y
+    help
+        Enable atexit data structure as global variable.  By doing so it is
+        move out of _reent structure, and can be garbage collected if atexit
+        is not referenced.
+
+config LIBC_NANO_NEWLIB_LITE_EXIT
+    bool
+    prompt "Enable lite exit"
+    default y
+    help
+        Enable lite exit, a size-reduced implementation of exit that doesn't
+        invoke clean-up functions such as _fini or global destructors.
+
+config LIBC_NANO_NEWLIB_REENT_SMALL
+    bool
+    prompt "Enable small reentrant struct support"
+    default y
+    help
+        Enable small reentrant struct support.
+
+config LIBC_NANO_NEWLIB_MULTITHREAD
+    bool
+    prompt "Enable support for multiple threads"
+    default y
+    help
+        Enable support for multiple threads.
+
+config LIBC_NANO_NEWLIB_EXTRA_SECTIONS
+    bool
+    prompt "Place each function & data element in their own section"
+    help
+        Place each function & data symbol in their own section. This allows
+        the linker to garbage collect unused symbols at link time.
+
+config LIBC_NANO_NEWLIB_WIDE_ORIENT
+    bool
+    prompt "Allow wide C99 stream orientation"
+    help
+        C99 states that each stream has an orientation, wide or byte.  This
+        feature is possibly unnecessary for embedded systems which only do
+        byte input/output operations on stream. Disabling this feature can
+        decrease code size.
+
+config LIBC_NANO_NEWLIB_ENABLE_TARGET_OPTSPACE
+    bool
+    prompt "Optimize newlib for size"
+    default y
+    help
+      Pass --enable-target-optspace to newlib configure.
+
+      This will compile newlib with -Os.
+
+config LIBC_NANO_NEWLIB_LTO
+    bool
+    prompt "Enable Link Time Optimization"
+    depends on CC_GCC_USE_LTO
+    help
+      Builds the libraries with -flto to enable more aggressive link time
+      optimization. You will need to add -flto-partition=one to your
+      application's link line to keep the RETURN assembler macro together
+      with it's consumers.
+
+config LIBC_NANO_NEWLIB_NANO_MALLOC
+    bool
+    prompt "Enable Nano Malloc"
+    default y
+    depends on NEWLIB_HAS_NANO_MALLOC
+    help
+      NEWLIB has two implementations of malloc family's functions, one in
+      `mallocr.c' and the other one in `nano-mallocr.c'.  This options
+      enables the nano-malloc implementation, which is for small systems
+      with very limited memory.  Note that this implementation does not
+      support `--enable-malloc-debugging' any more.
+
+config LIBC_NANO_NEWLIB_NANO_FORMATTED_IO
+    bool
+    prompt "Enable Nano Formatted I/O"
+    default y
+    depends on NEWLIB_HAS_NANO_FORMATTED_IO
+    help
+      This builds NEWLIB with a special implementation of formatted I/O
+      functions, designed to lower the size of application on small systems
+      with size constraint issues.  This option does not affect wide-char
+      formatted I/O functions.
+
+config LIBC_NANO_NEWLIB_EXTRA_CONFIG_ARRAY
+    string
+    prompt "Extra config for newlib"
+    default ""
+    help
+      Extra flags to pass onto ./configure when configuring the newlib.
+
+endif # LIBC_NANO_NEWLIB
-- 
2.17.1

